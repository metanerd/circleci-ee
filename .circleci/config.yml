version: 2.1

parameters:
  branch_external:
    type: string
    default: ""
  sha:
    type: string
    default: ""

jobs:
  setup:
    docker:
      - image: mattermost/mattermost-build-webapp:oct-2-2018
    working_directory: /go/src/github.com/metanerd/
    steps:
      - checkout
      - when:
          condition: << pipeline.parameters.sha >>
          steps:
            - run: expr length "${GITHUB_USER_TOKEN}"
            - run:
                name: Send pending status
                command: |
                  curl \
                    --request POST \
                    --url https://api.github.com/repos/metanerd/circleci-test/statuses/<< pipeline.parameters.sha >> \
                    --user ${GITHUB_USER}:${GITHUB_USER_TOKEN} \
                    --header 'content-type: application/json' \
                    --data '{"state": "pending", "description": "Running Enterprise master with << pipeline.parameters.sha >> . ", "context": "circleci/enterprise-integration"}'
      - run:
          command: |
            export CURL_WO=$(curl \
              --request POST \
              --url https://api.github.com/repos/metanerd/circleci-test/statuses/b712372781fe8b181f499288344001d6db7b049b \
              --header 'content-type: application/json' \
              --data '{"state": "failure", "description": "FAILED ", "context": "circleci/enterprise-integration"}')
            echo $CURL_WO
      - run:
          name: test trapping the error
          command: |
            CURL=$(curl \
              --request POST \
              --url https://api.github.com/repos/metanerd/circleci-test/statuses/b712372781fe8b181f499288344001d6db7b049b \
              --user $GITHUB_USER:$GITHUB_USER_TOKEN \
              --header 'content-type: application/json')
            trap '$CURL' ERR
            trap -p
            echo "hello" | grep foo
      - run:
          name: Checkout mattermost-server
          command: |
            mkdir -p ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            git clone git@github.com:mattermost/mattermost-server.git

            cd mattermost-server
            /go/src/github.com/metanerd/.circleci/git-checkout-branch.sh "<< pipeline.parameters.branch_external >>"
            git branch
      - run:
          name: Checkout mattermost-webapp
          command: |
            ls -la
            mkdir -p ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            git clone git@github.com:mattermost/mattermost-webapp.git

            cd mattermost-webapp
            /go/src/github.com/metanerd/.circleci/git-checkout-branch.sh "<< pipeline.parameters.branch_external >>"

            export WEBAPP_GIT_COMMIT=$(git rev-parse HEAD)
            echo "$WEBAPP_GIT_COMMIT"

  build:
    docker:
      - image: mattermost/mattermost-build-server:oct-18-2019
    steps:
      - checkout
      - attach_workspace:
          at: /go/src/github.com/metanerd/
      - run:
          command: |
            echo "Installing golangci-lint"

  test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/go/src/github.com/metanerd/circleci-ee
    steps:
      - checkout
      - run: git branch
      - run: echo ${CIRCLE_BRANCH}
      - when:
          condition: << pipeline.parameters.sha >>
          steps:
            - run: expr length "${GITHUB_USER_TOKEN}"
            - run:
                name: Sending success status
                command: |
                  curl \
                    --request POST \
                    --url https://api.github.com/repos/metanerd/circleci-test/statuses/<< pipeline.parameters.sha >> \
                    --user ${GITHUB_USER}:${GITHUB_USER_TOKEN} \
                    --header 'content-type: application/json' \
                    --data '{"state": "success", "description": "Enterprise tests passed. ", "context": "enterprise-integration/circleci"}'

workflows:
  version: 2
  standard-ee:
    unless: << pipeline.parameters.sha >>
    jobs:
      - setup:
          context: metanerd-trigger-ee
#      - build
#      - test:
#          requires:
#            - build
#          filters:
#            branches:
#              ignore: /^pull\/.*$/

  trigger-from-server:
    when: << pipeline.parameters.sha >>
    jobs:
      - setup:
          context: metanerd-trigger-ee
      - build
      - test:
          context: metanerd-trigger-ee
          requires:
            - build
